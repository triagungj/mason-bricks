import 'package:dartz/dartz.dart';

class {{ usecases.method.pascalCase() }}{{ usecases.name.pascalCase() }}Usecase extends UseCase<{{ usecases.response.pascalCase() }}Entity,{{ #usecases.isHaveBody }}{{ usecases.bodyName.pascalCase() }}{{ /usecases.isHaveBody }}{{ ^usecases.isHaveBody }} NoParams{{ /usecases.isHaveBody }}> {
    {{ usecases.method.pascalCase() }}{{ usecases.name.pascalCase() }}Usecase(this._repository);

    final {{ feature.pascalCase() }}Repository _repository;

    @override
    Future<Either<Failure, {{ usecases.response.pascalCase() }}Entity>> call({{ #usecases.isHaveBody }}{{ usecases.bodyName.pascalCase() }} params{{ /usecases.isHaveBody }}) {
    return _repository.{{ usecases.method.lowerCase() }}{{ usecases.name.pascalCase() }}({{ #usecases.isHaveBody }}params{{ /usecases.isHaveBody }});
    }
}
